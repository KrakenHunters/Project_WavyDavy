//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""9a4585cf-023f-4dbf-b725-ea09fc1d006f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""988a9dfd-4d83-4511-b49a-83245d726f79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fabb6489-8beb-47a2-a597-7545c461bc10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a43e6ef9-1b51-4128-a5f0-e1cec0222f71"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerTrickState"",
            ""id"": ""997b277b-9480-41a1-ac4a-47bbada963a8"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""d36622b5-0469-47cf-afa6-7408e1e729d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""f2939d04-75d9-4aa5-989e-ee3e4e9e4059"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""0fe42035-bce0-4979-a157-1959bafbe173"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""5e309b04-c223-4666-9a05-a196a6b36b01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1f69e08-1932-4779-8202-05d59383b00f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08ccd0f3-932e-4665-90f0-574febb4f7f7"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a60e410-15ae-4ac9-947b-2d1303f5c412"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""233bf6ff-80c1-4245-a457-cd4b5bf9c2b4"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84e286a2-aeb9-411f-a46c-ce0291d9d4c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa1de92e-f822-4d61-aefb-26b1e10bc230"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620f820b-46cc-48d2-b68f-1f3ee8b72c54"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19636f9a-1c8b-4c1a-b6a8-e231ae19c419"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerPaddle"",
            ""id"": ""ca65f1b2-8874-4a75-904a-93a0174189ca"",
            ""actions"": [
                {
                    ""name"": ""Paddle"",
                    ""type"": ""Button"",
                    ""id"": ""f2171b36-0b2e-4542-ad01-010ea2926908"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1b670dd-4114-442b-9fdb-8685d41e1a15"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30c014b5-4bf8-4d0d-8d76-d534e11ad2ad"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        // PlayerTrickState
        m_PlayerTrickState = asset.FindActionMap("PlayerTrickState", throwIfNotFound: true);
        m_PlayerTrickState_Up = m_PlayerTrickState.FindAction("Up", throwIfNotFound: true);
        m_PlayerTrickState_Down = m_PlayerTrickState.FindAction("Down", throwIfNotFound: true);
        m_PlayerTrickState_Left = m_PlayerTrickState.FindAction("Left", throwIfNotFound: true);
        m_PlayerTrickState_Right = m_PlayerTrickState.FindAction("Right", throwIfNotFound: true);
        // PlayerPaddle
        m_PlayerPaddle = asset.FindActionMap("PlayerPaddle", throwIfNotFound: true);
        m_PlayerPaddle_Paddle = m_PlayerPaddle.FindAction("Paddle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    public struct PlayerMovementActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerTrickState
    private readonly InputActionMap m_PlayerTrickState;
    private List<IPlayerTrickStateActions> m_PlayerTrickStateActionsCallbackInterfaces = new List<IPlayerTrickStateActions>();
    private readonly InputAction m_PlayerTrickState_Up;
    private readonly InputAction m_PlayerTrickState_Down;
    private readonly InputAction m_PlayerTrickState_Left;
    private readonly InputAction m_PlayerTrickState_Right;
    public struct PlayerTrickStateActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerTrickStateActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_PlayerTrickState_Up;
        public InputAction @Down => m_Wrapper.m_PlayerTrickState_Down;
        public InputAction @Left => m_Wrapper.m_PlayerTrickState_Left;
        public InputAction @Right => m_Wrapper.m_PlayerTrickState_Right;
        public InputActionMap Get() { return m_Wrapper.m_PlayerTrickState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerTrickStateActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerTrickStateActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerTrickStateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerTrickStateActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IPlayerTrickStateActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IPlayerTrickStateActions instance)
        {
            if (m_Wrapper.m_PlayerTrickStateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerTrickStateActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerTrickStateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerTrickStateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerTrickStateActions @PlayerTrickState => new PlayerTrickStateActions(this);

    // PlayerPaddle
    private readonly InputActionMap m_PlayerPaddle;
    private List<IPlayerPaddleActions> m_PlayerPaddleActionsCallbackInterfaces = new List<IPlayerPaddleActions>();
    private readonly InputAction m_PlayerPaddle_Paddle;
    public struct PlayerPaddleActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerPaddleActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Paddle => m_Wrapper.m_PlayerPaddle_Paddle;
        public InputActionMap Get() { return m_Wrapper.m_PlayerPaddle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerPaddleActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerPaddleActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerPaddleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerPaddleActionsCallbackInterfaces.Add(instance);
            @Paddle.started += instance.OnPaddle;
            @Paddle.performed += instance.OnPaddle;
            @Paddle.canceled += instance.OnPaddle;
        }

        private void UnregisterCallbacks(IPlayerPaddleActions instance)
        {
            @Paddle.started -= instance.OnPaddle;
            @Paddle.performed -= instance.OnPaddle;
            @Paddle.canceled -= instance.OnPaddle;
        }

        public void RemoveCallbacks(IPlayerPaddleActions instance)
        {
            if (m_Wrapper.m_PlayerPaddleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerPaddleActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerPaddleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerPaddleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerPaddleActions @PlayerPaddle => new PlayerPaddleActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerTrickStateActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
    public interface IPlayerPaddleActions
    {
        void OnPaddle(InputAction.CallbackContext context);
    }
}
